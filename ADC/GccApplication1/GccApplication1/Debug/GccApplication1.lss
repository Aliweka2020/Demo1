
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000024c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000062d  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034a  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d0  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b8  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ef  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000157  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
#include "ADC.h"
#include <avr/io.h>
void ADC_init()
{
	
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS2);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	85 68       	ori	r24, 0x85	; 133
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <ADC_Read>:
}
int ADC_Read(int ch)
{
	DDRA &= ~(1<<ch);
  8a:	9a b3       	in	r25, 0x1a	; 26
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <ADC_Read+0xe>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <ADC_Read+0xa>
  9c:	20 95       	com	r18
  9e:	29 23       	and	r18, r25
  a0:	2a bb       	out	0x1a, r18	; 26
	ADMUX =  ch;
  a2:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);
  a4:	3d 9a       	sbi	0x07, 5	; 7
	
	ADCSRA |= (1<<ADSC);
  a6:	36 9a       	sbi	0x06, 6	; 6
	while ( (ADCSRA & (1<<ADIF) ) ==0);
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_Read+0x1e>
	ADCSRA |= (1<<ADIF);
  ac:	34 9a       	sbi	0x06, 4	; 6
	return ((int) (ADCH));
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <main>:
#include <util/delay.h>
#include "LCD.h"
#include "ADC.h"
int main(void)
{
	DDRB |= (1<<3);
  b4:	bb 9a       	sbi	0x17, 3	; 23
	LCD_init();
  b6:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_init>
	ADC_init();
  ba:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8d e2       	ldi	r24, 0x2D	; 45
  c0:	92 e2       	ldi	r25, 0x22	; 34
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0xe>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x14>
  c8:	00 00       	nop
	_delay_ms(35);
	LCD_send_cmd(Function_Set8bit); 
  ca:	88 e3       	ldi	r24, 0x38	; 56
  cc:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_send_cmd>
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x20>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x26>
  da:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(Display_Cur_NoBlink);
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_send_cmd>
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x32>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x38>
  ec:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(LCD_Clear);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_send_cmd>
  f4:	83 ef       	ldi	r24, 0xF3	; 243
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x44>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x4a>
  fe:	00 00       	nop
	_delay_ms(2);
	LCD_send_cmd(Entry_INC_NOshift);
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_send_cmd>
	while(1)
	   {
        LCD_send_cmd(0x80);
		LCD_send_string("Temp = ");
		int temp = ADC_Read(0);
		temp  = temp * 500 /256;
 106:	0f 2e       	mov	r0, r31
 108:	f4 ef       	ldi	r31, 0xF4	; 244
 10a:	ef 2e       	mov	r14, r31
 10c:	ff 24       	eor	r15, r15
 10e:	f3 94       	inc	r15
 110:	f0 2d       	mov	r31, r0
		}
		else
		{
			PORTB &= ~(1<<3);
		}
		int n =  temp/100;
 112:	04 e6       	ldi	r16, 0x64	; 100
 114:	10 e0       	ldi	r17, 0x00	; 0
		LCD_send_data(n + 0x30);
		temp = temp %100;
		n =  temp/10;
 116:	ca e0       	ldi	r28, 0x0A	; 10
 118:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_send_cmd(LCD_Clear);
	_delay_ms(2);
	LCD_send_cmd(Entry_INC_NOshift);
	while(1)
	   {
        LCD_send_cmd(0x80);
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_send_cmd>
		LCD_send_string("Temp = ");
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_send_string>
		int temp = ADC_Read(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_Read>
		temp  = temp * 500 /256;
 130:	8e 9d       	mul	r24, r14
 132:	90 01       	movw	r18, r0
 134:	8f 9d       	mul	r24, r15
 136:	30 0d       	add	r19, r0
 138:	9e 9d       	mul	r25, r14
 13a:	30 0d       	add	r19, r0
 13c:	11 24       	eor	r1, r1
 13e:	33 23       	and	r19, r19
 140:	14 f4       	brge	.+4      	; 0x146 <main+0x92>
 142:	21 50       	subi	r18, 0x01	; 1
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	83 2f       	mov	r24, r19
 148:	93 2f       	mov	r25, r19
 14a:	99 0f       	add	r25, r25
 14c:	99 0b       	sbc	r25, r25
		
		if (temp > 30)
 14e:	8f 31       	cpi	r24, 0x1F	; 31
 150:	91 05       	cpc	r25, r1
 152:	14 f0       	brlt	.+4      	; 0x158 <main+0xa4>
		{
			PORTB |=(1<<3);
 154:	c3 9a       	sbi	0x18, 3	; 24
 156:	01 c0       	rjmp	.+2      	; 0x15a <main+0xa6>
		}
		else
		{
			PORTB &= ~(1<<3);
 158:	c3 98       	cbi	0x18, 3	; 24
		}
		int n =  temp/100;
 15a:	b8 01       	movw	r22, r16
 15c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divmodhi4>
 160:	6c 01       	movw	r12, r24
		LCD_send_data(n + 0x30);
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	86 0f       	add	r24, r22
 166:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_send_data>
		temp = temp %100;
		n =  temp/10;
 16a:	c6 01       	movw	r24, r12
 16c:	be 01       	movw	r22, r28
 16e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divmodhi4>
 172:	d8 2e       	mov	r13, r24
		LCD_send_data(n + 0x30);
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	86 0f       	add	r24, r22
 178:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_send_data>
		temp = temp %10;
		LCD_send_data(temp + 0x30);
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	8d 0d       	add	r24, r13
 180:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_send_data>
		
		
		
		//LCD_send_string("ALi");
		
    }
 184:	ca cf       	rjmp	.-108    	; 0x11a <main+0x66>

00000186 <LCD_init>:
	if(LCD_DATA_PORT == A)
		DDRA = 0xFF;
	else if(LCD_DATA_PORT == B)
		DDRB = 0xFF;
	else if(LCD_DATA_PORT == C)
		DDRC = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
	{
		DDRA |= (1<<RS) | (1<<E) | (1<<RW);
	}
	else if (LCD_CONTROL_PORT == B)
	{
		DDRB |= (1<<RS) | (1<<E)| (1<<RW);
 18a:	87 b3       	in	r24, 0x17	; 23
 18c:	87 60       	ori	r24, 0x07	; 7
 18e:	87 bb       	out	0x17, r24	; 23
 190:	08 95       	ret

00000192 <LCD_send_cmd>:
	
}
void LCD_send_cmd(unsigned char cmd)
{
	
	PORTB &= ~(1<<RS);
 192:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1<<RW);
 194:	c2 98       	cbi	0x18, 2	; 24
	
		
	PORTC =  cmd;
 196:	85 bb       	out	0x15, r24	; 21
	
	PORTB |=(1<<E);
 198:	c1 9a       	sbi	0x18, 1	; 24
 19a:	89 ef       	ldi	r24, 0xF9	; 249
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_send_cmd+0xc>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_send_cmd+0x12>
 1a4:	00 00       	nop
	_delay_ms(1);
	PORTB &=~(1<<E);
 1a6:	c1 98       	cbi	0x18, 1	; 24
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_send_cmd+0x1a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_send_cmd+0x20>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <LCD_send_data>:
	*/
	
}
void LCD_send_data(unsigned char data)
{
	PORTB |= (1<<RS);   //RS =1
 1b6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1<<RW);
 1b8:	c2 98       	cbi	0x18, 2	; 24
	
		
			
			PORTC =  data;
 1ba:	85 bb       	out	0x15, r24	; 21
			
			PORTB |=(1<<E);
 1bc:	c1 9a       	sbi	0x18, 1	; 24
 1be:	89 ef       	ldi	r24, 0xF9	; 249
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_send_data+0xc>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_send_data+0x12>
 1c8:	00 00       	nop
			_delay_ms(1);
			PORTB &=~(1<<E);
 1ca:	c1 98       	cbi	0x18, 1	; 24
 1cc:	89 ef       	ldi	r24, 0xF9	; 249
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_send_data+0x1a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <LCD_send_data+0x20>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <LCD_send_string>:
 */ 
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>
LCD_send_string(char *s)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
	while(*s != '\0')
 1e0:	88 81       	ld	r24, Y
 1e2:	88 23       	and	r24, r24
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <LCD_send_string+0x18>
 1e6:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send_data(*s);
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_send_data>
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>
LCD_send_string(char *s)
{
	while(*s != '\0')
 1ec:	89 91       	ld	r24, Y+
 1ee:	81 11       	cpse	r24, r1
 1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <LCD_send_string+0xe>
	{
		LCD_send_data(*s);
		s++;
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <__divmodhi4>:
 1f8:	97 fb       	bst	r25, 7
 1fa:	07 2e       	mov	r0, r23
 1fc:	16 f4       	brtc	.+4      	; 0x202 <__divmodhi4+0xa>
 1fe:	00 94       	com	r0
 200:	07 d0       	rcall	.+14     	; 0x210 <__divmodhi4_neg1>
 202:	77 fd       	sbrc	r23, 7
 204:	09 d0       	rcall	.+18     	; 0x218 <__divmodhi4_neg2>
 206:	0e 94 10 01 	call	0x220	; 0x220 <__udivmodhi4>
 20a:	07 fc       	sbrc	r0, 7
 20c:	05 d0       	rcall	.+10     	; 0x218 <__divmodhi4_neg2>
 20e:	3e f4       	brtc	.+14     	; 0x21e <__divmodhi4_exit>

00000210 <__divmodhi4_neg1>:
 210:	90 95       	com	r25
 212:	81 95       	neg	r24
 214:	9f 4f       	sbci	r25, 0xFF	; 255
 216:	08 95       	ret

00000218 <__divmodhi4_neg2>:
 218:	70 95       	com	r23
 21a:	61 95       	neg	r22
 21c:	7f 4f       	sbci	r23, 0xFF	; 255

0000021e <__divmodhi4_exit>:
 21e:	08 95       	ret

00000220 <__udivmodhi4>:
 220:	aa 1b       	sub	r26, r26
 222:	bb 1b       	sub	r27, r27
 224:	51 e1       	ldi	r21, 0x11	; 17
 226:	07 c0       	rjmp	.+14     	; 0x236 <__udivmodhi4_ep>

00000228 <__udivmodhi4_loop>:
 228:	aa 1f       	adc	r26, r26
 22a:	bb 1f       	adc	r27, r27
 22c:	a6 17       	cp	r26, r22
 22e:	b7 07       	cpc	r27, r23
 230:	10 f0       	brcs	.+4      	; 0x236 <__udivmodhi4_ep>
 232:	a6 1b       	sub	r26, r22
 234:	b7 0b       	sbc	r27, r23

00000236 <__udivmodhi4_ep>:
 236:	88 1f       	adc	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	5a 95       	dec	r21
 23c:	a9 f7       	brne	.-22     	; 0x228 <__udivmodhi4_loop>
 23e:	80 95       	com	r24
 240:	90 95       	com	r25
 242:	bc 01       	movw	r22, r24
 244:	cd 01       	movw	r24, r26
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
