
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000057a  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002da  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000342  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e4  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000010e  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "LCD.h"
void ADC_init()
{
	DDRA &= ~(1<<0);
  82:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX |= (1<<ADLAR);
  84:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS2);
  86:	86 b1       	in	r24, 0x06	; 6
  88:	85 68       	ori	r24, 0x85	; 133
  8a:	86 b9       	out	0x06, r24	; 6
  8c:	08 95       	ret

0000008e <ADC_Read>:
}
int ADC_Read()
{
	ADCSRA |= (1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6
	while ( (ADCSRA & (1<<ADIF) ) ==0);
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <ADC_Read+0x2>
	ADCSRA |= (1<<ADIF);
  94:	34 9a       	sbi	0x06, 4	; 6
	return ((int) (ADCH));
  96:	85 b1       	in	r24, 0x05	; 5
}
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <main>:
int main(void)
{
	
	LCD_init();
  9c:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_init>
	ADC_init();
  a0:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8d e2       	ldi	r24, 0x2D	; 45
  a6:	92 e2       	ldi	r25, 0x22	; 34
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0xc>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x12>
  ae:	00 00       	nop
	_delay_ms(35);
	LCD_send_cmd(Function_Set8bit); 
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_send_cmd>
  b6:	89 ef       	ldi	r24, 0xF9	; 249
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x1e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x24>
  c0:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(Display_Cur_NoBlink);
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_send_cmd>
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x30>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x36>
  d2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(LCD_Clear);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_send_cmd>
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x42>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x48>
  e4:	00 00       	nop
	_delay_ms(2);
	LCD_send_cmd(Entry_INC_NOshift);
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_send_cmd>
	while(1)
	   {
        LCD_send_cmd(0x80);
		LCD_send_string("ADC = ");
		int temp = ADC_Read();
		int n =  temp/100;
  ec:	0f 2e       	mov	r0, r31
  ee:	f4 e6       	ldi	r31, 0x64	; 100
  f0:	ef 2e       	mov	r14, r31
  f2:	f1 2c       	mov	r15, r1
  f4:	f0 2d       	mov	r31, r0
		LCD_send_data(n + 0x30);
		temp = temp %100;
		n =  temp/10;
  f6:	0a e0       	ldi	r16, 0x0A	; 10
  f8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_send_cmd(LCD_Clear);
	_delay_ms(2);
	LCD_send_cmd(Entry_INC_NOshift);
	while(1)
	   {
        LCD_send_cmd(0x80);
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_send_cmd>
		LCD_send_string("ADC = ");
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_send_string>
		int temp = ADC_Read();
 108:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
		int n =  temp/100;
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__divmodhi4>
 112:	ec 01       	movw	r28, r24
		LCD_send_data(n + 0x30);
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	86 0f       	add	r24, r22
 118:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_send_data>
		temp = temp %100;
		n =  temp/10;
 11c:	ce 01       	movw	r24, r28
 11e:	b8 01       	movw	r22, r16
 120:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__divmodhi4>
 124:	c8 2f       	mov	r28, r24
		LCD_send_data(n + 0x30);
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	86 0f       	add	r24, r22
 12a:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_send_data>
		temp = temp %10;
		LCD_send_data(temp + 0x30);
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	8c 0f       	add	r24, r28
 132:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_send_data>
 136:	e1 cf       	rjmp	.-62     	; 0xfa <main+0x5e>

00000138 <LCD_init>:
	if(LCD_DATA_PORT == A)
		DDRA = 0xFF;
	else if(LCD_DATA_PORT == B)
		DDRB = 0xFF;
	else if(LCD_DATA_PORT == C)
		DDRC = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	84 bb       	out	0x14, r24	; 20
	{
		DDRA |= (1<<RS) | (1<<E) | (1<<RW);
	}
	else if (LCD_CONTROL_PORT == B)
	{
		DDRB |= (1<<RS) | (1<<E)| (1<<RW);
 13c:	87 b3       	in	r24, 0x17	; 23
 13e:	87 60       	ori	r24, 0x07	; 7
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret

00000144 <LCD_send_cmd>:
	
}
void LCD_send_cmd(unsigned char cmd)
{
	
	PORTB &= ~(1<<RS);
 144:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1<<RW);
 146:	c2 98       	cbi	0x18, 2	; 24
	
		
	PORTC =  cmd;
 148:	85 bb       	out	0x15, r24	; 21
	
	PORTB |=(1<<E);
 14a:	c1 9a       	sbi	0x18, 1	; 24
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_send_cmd+0xc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_send_cmd+0x12>
 156:	00 00       	nop
	_delay_ms(1);
	PORTB &=~(1<<E);
 158:	c1 98       	cbi	0x18, 1	; 24
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_send_cmd+0x1a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_send_cmd+0x20>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LCD_send_data>:
	*/
	
}
void LCD_send_data(unsigned char data)
{
	PORTB |= (1<<RS);   //RS =1
 168:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1<<RW);
 16a:	c2 98       	cbi	0x18, 2	; 24
	
		
			
			PORTC =  data;
 16c:	85 bb       	out	0x15, r24	; 21
			
			PORTB |=(1<<E);
 16e:	c1 9a       	sbi	0x18, 1	; 24
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_send_data+0xc>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_send_data+0x12>
 17a:	00 00       	nop
			_delay_ms(1);
			PORTB &=~(1<<E);
 17c:	c1 98       	cbi	0x18, 1	; 24
 17e:	89 ef       	ldi	r24, 0xF9	; 249
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_send_data+0x1a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_send_data+0x20>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <LCD_send_string>:
 */ 
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>
LCD_send_string(char *s)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
	while(*s != '\0')
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	31 f0       	breq	.+12     	; 0x1a4 <LCD_send_string+0x18>
 198:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send_data(*s);
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_send_data>
#include "LCD.h"
#include <avr/io.h>
#include <util/delay.h>
LCD_send_string(char *s)
{
	while(*s != '\0')
 19e:	89 91       	ld	r24, Y+
 1a0:	81 11       	cpse	r24, r1
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <LCD_send_string+0xe>
	{
		LCD_send_data(*s);
		s++;
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <__divmodhi4>:
 1aa:	97 fb       	bst	r25, 7
 1ac:	07 2e       	mov	r0, r23
 1ae:	16 f4       	brtc	.+4      	; 0x1b4 <__divmodhi4+0xa>
 1b0:	00 94       	com	r0
 1b2:	07 d0       	rcall	.+14     	; 0x1c2 <__divmodhi4_neg1>
 1b4:	77 fd       	sbrc	r23, 7
 1b6:	09 d0       	rcall	.+18     	; 0x1ca <__divmodhi4_neg2>
 1b8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__udivmodhi4>
 1bc:	07 fc       	sbrc	r0, 7
 1be:	05 d0       	rcall	.+10     	; 0x1ca <__divmodhi4_neg2>
 1c0:	3e f4       	brtc	.+14     	; 0x1d0 <__divmodhi4_exit>

000001c2 <__divmodhi4_neg1>:
 1c2:	90 95       	com	r25
 1c4:	81 95       	neg	r24
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	08 95       	ret

000001ca <__divmodhi4_neg2>:
 1ca:	70 95       	com	r23
 1cc:	61 95       	neg	r22
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255

000001d0 <__divmodhi4_exit>:
 1d0:	08 95       	ret

000001d2 <__udivmodhi4>:
 1d2:	aa 1b       	sub	r26, r26
 1d4:	bb 1b       	sub	r27, r27
 1d6:	51 e1       	ldi	r21, 0x11	; 17
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__udivmodhi4_ep>

000001da <__udivmodhi4_loop>:
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	a6 17       	cp	r26, r22
 1e0:	b7 07       	cpc	r27, r23
 1e2:	10 f0       	brcs	.+4      	; 0x1e8 <__udivmodhi4_ep>
 1e4:	a6 1b       	sub	r26, r22
 1e6:	b7 0b       	sbc	r27, r23

000001e8 <__udivmodhi4_ep>:
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	5a 95       	dec	r21
 1ee:	a9 f7       	brne	.-22     	; 0x1da <__udivmodhi4_loop>
 1f0:	80 95       	com	r24
 1f2:	90 95       	com	r25
 1f4:	bc 01       	movw	r22, r24
 1f6:	cd 01       	movw	r24, r26
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
