
TIMER0_REV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000020f  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a6  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000217  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019e  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_init>:
#include "TIMER0_Interface.h"
#include "TIMER0_Private.h"
#include "TIMER0_config.h"
void Timer0_init()
{
	DDRB |=(1<<3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
	//configure Wave generation mode
	#if Mode == Fast_PWM
	   MY_TCCR0 |=(1<<WGM01)|(1<<WGM00);
  6e:	83 b7       	in	r24, 0x33	; 51
  70:	88 64       	ori	r24, 0x48	; 72
  72:	83 bf       	out	0x33, r24	; 51
	#elif Mode == CTC
	
	#endif
	//configure Clock_Select
	#if Clock_Select == Clock_64
			MY_TCCR0 |=(1<<CS01)|(1<<CS00);
  74:	83 b7       	in	r24, 0x33	; 51
  76:	83 60       	ori	r24, 0x03	; 3
  78:	83 bf       	out	0x33, r24	; 51
	#endif
	
	//configure Compare_Output_Mode
	#if Compare_Output_Mode== Non_Inverting
	 MY_TCCR0 |=(1<<COM01) ;
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	83 bf       	out	0x33, r24	; 51
  80:	08 95       	ret

00000082 <Timer0_SetOCR>:
	#endif
}
void Timer0_SetOCR(unsigned char duty)
{
	MY_OCR0 =duty;
  82:	8c bf       	out	0x3c, r24	; 60
  84:	08 95       	ret

00000086 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include "TIMER0_Interface.h"
int main(void)
{
	Timer0_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_init>
	Timer0_SetOCR(1);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 41 00 	call	0x82	; 0x82 <Timer0_SetOCR>
    while(1)
    {
		for (int i=0;i<255;i++)
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	00 e0       	ldi	r16, 0x00	; 0
  96:	10 e0       	ldi	r17, 0x00	; 0
		{
			Timer0_SetOCR(i);
  98:	8c 2f       	mov	r24, r28
  9a:	0e 94 41 00 	call	0x82	; 0x82 <Timer0_SetOCR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	87 ea       	ldi	r24, 0xA7	; 167
  a0:	91 e6       	ldi	r25, 0x61	; 97
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x22>
  a8:	00 00       	nop
{
	Timer0_init();
	Timer0_SetOCR(1);
    while(1)
    {
		for (int i=0;i<255;i++)
  aa:	21 96       	adiw	r28, 0x01	; 1
  ac:	cf 3f       	cpi	r28, 0xFF	; 255
  ae:	d1 05       	cpc	r29, r1
  b0:	9c f3       	brlt	.-26     	; 0x98 <main+0x12>
  b2:	c0 2f       	mov	r28, r16
  b4:	d1 2f       	mov	r29, r17
  b6:	f0 cf       	rjmp	.-32     	; 0x98 <main+0x12>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
