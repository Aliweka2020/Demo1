
TIMER0_REV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b6  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014b  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b6  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000165  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000038  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_init>:
#include "TIMER0_Interface.h"
#include "TIMER0_Private.h"
#include "TIMER0_config.h"
void Timer0_init()
{
	DDRB |=(1<<3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
	//configure Wave generation mode
	#if Mode == Fast_PWM
	   MY_TCCR0 |=(1<<WGM01)|(1<<WGM00);
  6e:	83 b7       	in	r24, 0x33	; 51
  70:	88 64       	ori	r24, 0x48	; 72
  72:	83 bf       	out	0x33, r24	; 51
	#elif Mode == CTC
	
	#endif
	//configure Clock_Select
	#if Clock_Select == Clock_64
			MY_TCCR0 |=(1<<CS01)|(1<<CS00);
  74:	83 b7       	in	r24, 0x33	; 51
  76:	83 60       	ori	r24, 0x03	; 3
  78:	83 bf       	out	0x33, r24	; 51
	#endif
	
	//configure Compare_Output_Mode
	#if Compare_Output_Mode== Non_Inverting
	 MY_TCCR0 |=(1<<COM01) ;
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	83 bf       	out	0x33, r24	; 51
  80:	08 95       	ret

00000082 <Timer0_SetOCR>:
	#endif
}
void Timer0_SetOCR(unsigned char duty)
{
	MY_OCR0 =duty;
  82:	8c bf       	out	0x3c, r24	; 60
  84:	08 95       	ret

00000086 <ADC_init>:
#include <util/delay.h>
#include <avr/io.h>
#include "TIMER0_Interface.h"
void ADC_init()
{
	DDRA &= ~(1<<0);
  86:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX |= (1<<ADLAR);
  88:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS2);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	85 68       	ori	r24, 0x85	; 133
  8e:	86 b9       	out	0x06, r24	; 6
  90:	08 95       	ret

00000092 <ADC_Read>:
}
int ADC_Read()
{
	ADCSRA |= (1<<ADSC);
  92:	36 9a       	sbi	0x06, 6	; 6
	while ( (ADCSRA & (1<<ADIF) ) ==0);
  94:	34 9b       	sbis	0x06, 4	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <ADC_Read+0x2>
	ADCSRA |= (1<<ADIF);
  98:	34 9a       	sbi	0x06, 4	; 6
	return ((int) (ADCH));
  9a:	85 b1       	in	r24, 0x05	; 5
}
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <main>:
int main(void)
{
	ADC_init();
  a0:	0e 94 43 00 	call	0x86	; 0x86 <ADC_init>
	Timer0_init();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_init>
	Timer0_SetOCR(1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 41 00 	call	0x82	; 0x82 <Timer0_SetOCR>
    while(1)
    {
		//int x=ADC_Read();
		Timer0_SetOCR(ADC_Read());
  ae:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
  b2:	0e 94 41 00 	call	0x82	; 0x82 <Timer0_SetOCR>
  b6:	fb cf       	rjmp	.-10     	; 0xae <main+0xe>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
