
TIMER0_REV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000127  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f8  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000009f  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000155  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000005b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 38 00 	call	0x70	; 0x70 <main>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_init>:

#include "TIMER0_Interface.h"
#include "TIMER0_Private.h"
#include "TIMER0_config.h"
void Timer0_init()
{
  6c:	08 95       	ret

0000006e <Timer0_SetOCR>:
	#if Compare_Output_Mode== Non_Inverting
	 // MY_TCCR0 
	#endif
}
void Timer0_SetOCR(unsigned char duty)
{
  6e:	08 95       	ret

00000070 <main>:

#include <avr/io.h>
#include "TIMER0_Interface.h"
int main(void)
{
	Timer0_init();
  70:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_init>
	Timer0_SetOCR(125);
  74:	8d e7       	ldi	r24, 0x7D	; 125
  76:	0e 94 37 00 	call	0x6e	; 0x6e <Timer0_SetOCR>
  7a:	ff cf       	rjmp	.-2      	; 0x7a <main+0xa>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
